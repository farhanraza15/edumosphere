// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.edumosphere.lms.web;

import com.edumosphere.lms.domain.Company;
import com.edumosphere.lms.domain.Enrolment;
import com.edumosphere.lms.domain.User;
import com.edumosphere.lms.domain.UserEnrolment;
import com.edumosphere.lms.web.UserEnrolmentController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect UserEnrolmentController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String UserEnrolmentController.create(@Valid UserEnrolment userEnrolment, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, userEnrolment);
            return "userenrolments/create";
        }
        uiModel.asMap().clear();
        userEnrolment.persist();
        return "redirect:/userenrolments/" + encodeUrlPathSegment(userEnrolment.getUserenrolmentid().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String UserEnrolmentController.createForm(Model uiModel) {
        populateEditForm(uiModel, new UserEnrolment());
        return "userenrolments/create";
    }
    
    @RequestMapping(value = "/{userenrolmentid}", produces = "text/html")
    public String UserEnrolmentController.show(@PathVariable("userenrolmentid") Long userenrolmentid, Model uiModel) {
        uiModel.addAttribute("userenrolment", UserEnrolment.findUserEnrolment(userenrolmentid));
        uiModel.addAttribute("itemId", userenrolmentid);
        return "userenrolments/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String UserEnrolmentController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("userenrolments", UserEnrolment.findUserEnrolmentEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) UserEnrolment.countUserEnrolments() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("userenrolments", UserEnrolment.findAllUserEnrolments(sortFieldName, sortOrder));
        }
        return "userenrolments/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String UserEnrolmentController.update(@Valid UserEnrolment userEnrolment, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, userEnrolment);
            return "userenrolments/update";
        }
        uiModel.asMap().clear();
        userEnrolment.merge();
        return "redirect:/userenrolments/" + encodeUrlPathSegment(userEnrolment.getUserenrolmentid().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{userenrolmentid}", params = "form", produces = "text/html")
    public String UserEnrolmentController.updateForm(@PathVariable("userenrolmentid") Long userenrolmentid, Model uiModel) {
        populateEditForm(uiModel, UserEnrolment.findUserEnrolment(userenrolmentid));
        return "userenrolments/update";
    }
    
    @RequestMapping(value = "/{userenrolmentid}", method = RequestMethod.DELETE, produces = "text/html")
    public String UserEnrolmentController.delete(@PathVariable("userenrolmentid") Long userenrolmentid, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        UserEnrolment userEnrolment = UserEnrolment.findUserEnrolment(userenrolmentid);
        userEnrolment.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/userenrolments";
    }
    
    void UserEnrolmentController.populateEditForm(Model uiModel, UserEnrolment userEnrolment) {
        uiModel.addAttribute("userEnrolment", userEnrolment);
        uiModel.addAttribute("companys", Company.findAllCompanys());
        uiModel.addAttribute("enrolments", Enrolment.findAllEnrolments());
        uiModel.addAttribute("users", User.findAllUsers());
    }
    
    String UserEnrolmentController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
